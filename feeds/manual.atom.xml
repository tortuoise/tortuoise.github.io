<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wattwerks</title><link href="/" rel="alternate"></link><link href="/feeds/manual.atom.xml" rel="self"></link><id>/</id><updated>2015-06-22T00:00:00+01:00</updated><entry><title>Zeromq setup</title><link href="/zeromq-setup.html" rel="alternate"></link><updated>2015-06-22T00:00:00+01:00</updated><author><name>Sridhar</name></author><id>tag:,2015-06-22:zeromq-setup.html</id><summary type="html">&lt;p&gt;A quick summary of ZeroMQ setup, problems encountered and solutions. &lt;/p&gt;
&lt;h3&gt;libzmq&lt;/h3&gt;
&lt;p&gt;git clone https://github.com/tortuoise/libzmq&lt;br /&gt;
apt-get install libtool&lt;br /&gt;
apt-get install build-essential&lt;br /&gt;
apt-get install uuid-dev&lt;br /&gt;
cd libzmq&lt;br /&gt;
sh autogen.sh&lt;br /&gt;
./configure --without-libsodium&lt;br /&gt;
su root&lt;br /&gt;
make install&lt;br /&gt;
ldconfig  &lt;/p&gt;
&lt;h3&gt;czmq ###&lt;/h3&gt;
&lt;p&gt;git clone git://github.com/zeromq/czmq.git&lt;br /&gt;
cd czmq&lt;br /&gt;
sh autogen.sh&lt;br /&gt;
./configure &lt;br /&gt;
make all&lt;br /&gt;
su root&lt;br /&gt;
make install&lt;br /&gt;
ldconfig  &lt;/p&gt;
&lt;h3&gt;Problems encountered&lt;/h3&gt;
&lt;p&gt;Setup errors:&lt;br /&gt;
zguide/examples/C: Could not find libtool : change libtool to libtoolize in autogen.sh  &lt;/p&gt;
&lt;p&gt;./build all: Cannot find -luuid:  apt-get install uuid-dev&lt;br /&gt;
apt-cache search libuuid  &lt;/p&gt;
&lt;h3&gt;Why ?&lt;/h3&gt;
&lt;p&gt;The current device that we use for monitoring PV systems sends data to a receiver which is connected to a serial port of a laptop or desktop. The application running on the computer uses Java. The plan is to replace the laptop/desktop with a small device that runs a basic version of linux and something like zeromq, read the serial data arriving from a wireless device (Zigbee/ANT) and transmit it to a server via a direct connection to the router/modem.&lt;/p&gt;</summary><category term="zeromq"></category><category term="messaging"></category><category term="c"></category></entry><entry><title>Chronicle configuration</title><link href="/chronicle-configuration.html" rel="alternate"></link><updated>2013-12-22T00:00:00+00:00</updated><author><name>Sridhar</name></author><id>tag:,2013-12-22:chronicle-configuration.html</id><summary type="html">&lt;p&gt;Static site generator written in Perl. Converts text file to html.  &lt;/p&gt;
&lt;p&gt;Configuration file is /etc/chroniclerc  &lt;/p&gt;
&lt;p&gt;chronicle --input input_dir/ --output output_dir/ --sitemap-prefix http://www.yourdomain.com/  &lt;/p&gt;</summary><category term="software"></category></entry><entry><title>Nginx configuration</title><link href="/nginx-configuration.html" rel="alternate"></link><updated>2013-12-22T00:00:00+00:00</updated><author><name>Sridhar</name></author><id>tag:,2013-12-22:nginx-configuration.html</id><summary type="html">&lt;p&gt;Installation is straight forward : apt-get install nginx  &lt;/p&gt;
&lt;p&gt;Main configuration file is /etc/nginx/nginx.conf which is has includes to other config files such as /etc/nginx/sites-enabled/default. Added the proxy_pass entry in the location block to the first server and added the second server block to have nginx listen on 8080. So the first server listening at 80 is a proxy for the second listening at 8080 (or vice versa ?)  &lt;/p&gt;
&lt;p&gt;http {&lt;br /&gt;
  server {&lt;br /&gt;
    #server_name localhost;&lt;br /&gt;
    location / {&lt;br /&gt;
      proxy_pass http://localhost:8080;&lt;br /&gt;
    }&lt;br /&gt;
  }&lt;br /&gt;
  server {&lt;br /&gt;
    server_name www.hostname.com;&lt;br /&gt;
    listen 8080;&lt;br /&gt;
    root /path/to/root/dir;&lt;br /&gt;
    location /{&lt;br /&gt;
    }  &lt;br /&gt;
  }&lt;br /&gt;
...  &lt;br /&gt;
}  &lt;/p&gt;</summary><category term="nginx"></category><category term="internet"></category><category term="software"></category></entry><entry><title>TI MSP430</title><link href="/ti-msp430.html" rel="alternate"></link><updated>2013-12-22T00:00:00+00:00</updated><author><name>Sridhar</name></author><id>tag:,2013-12-22:ti-msp430.html</id><summary type="html">&lt;p&gt;Installation is straight forward : apt-get install nginx  &lt;/p&gt;
&lt;p&gt;Main configuration file is /etc/nginx/nginx.conf which is has includes to other config files such as /etc/nginx/sites-enabled/default. Added the proxy_pass entry in the location block to the first server and added the second server block to have nginx listen on 8080. So the first server listening at 80 is a proxy for the second listening at 8080 (or vice versa ?)  &lt;/p&gt;
&lt;p&gt;http {&lt;br /&gt;
  server {&lt;br /&gt;
    #server_name localhost;&lt;br /&gt;
    location / {&lt;br /&gt;
      proxy_pass http://localhost:8080;&lt;br /&gt;
    }&lt;br /&gt;
  }&lt;br /&gt;
  server {&lt;br /&gt;
    server_name www.hostname.com;&lt;br /&gt;
    listen 8080;&lt;br /&gt;
    root /path/to/root/dir;&lt;br /&gt;
    location /{&lt;br /&gt;
    }  &lt;br /&gt;
  }&lt;br /&gt;
...  &lt;br /&gt;
}  &lt;/p&gt;</summary><category term="nginx"></category><category term="internet"></category><category term="software"></category></entry><entry><title>Installing core Debian</title><link href="/installing-core-debian.html" rel="alternate"></link><updated>2013-12-15T00:00:00+00:00</updated><author><name>Sridhar</name></author><id>tag:,2013-12-15:installing-core-debian.html</id><summary type="html">&lt;p&gt;Easiest method is to write the iso image onto a cd and boot the machine from the cd. Once finished with basic configuration tasks, the installer will ask you to pick a mirror. The following command will help in deciding on the server with least latency.  &lt;/p&gt;
&lt;p&gt;netselect hostname1 hostname2 hostname3   &lt;/p&gt;
&lt;p&gt;Surprisingly, the server with least latency is in the US!  &lt;/p&gt;
&lt;p&gt;During pre-installation the installer will prompt for disk partitioning. Software RAID on Linux needs to be configured before Debian is installed. Follow the procedure &lt;a href="http://www.iprobot.net/linux-tutorial/how-to-setup-software-raid-in-debian-ubuntu/"&gt;here&lt;/a&gt;. The steps in brief for 2 hard disk RAID1 array are:    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose manual partitioning and create 3 partitions on each disk:  &lt;/li&gt;
&lt;li&gt;Boot(1GB): Primary, beginning, Physical volume for RAID, bootable flag ON.  &lt;/li&gt;
&lt;li&gt;Swap (2xRAM): Primary, beginning, Physical volume for RAID, bootable flag OFF.  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Root(remainder): Primary, Beginning, Physical volume for RAID, bootable flag OFF.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure Software RAID -&amp;gt; Create 3 new MD (multi-disk) devices with 2 active and 0 spare devices per MD device using the partitions created in step 1. So select the 2 boot partitions on the two disks as the active devices in one of the RAID1 MD devices. Then select the two Swap partitions as the active devices in the next RAID1 MD device and so on.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure the MD RAID1 devices to be used appropriately:  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;MD device 1 with 2 boot partitions: Use as EXT4 Journaling File System with Mount point /boot  &lt;/li&gt;
&lt;li&gt;MD device 2 with 2 swap partitions: Use as Swap Area  &lt;/li&gt;
&lt;li&gt;MD device 3 with 2 root partitions: Use as EXT4 Journaling File System with Mount point /root   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the partitioning and software RAID 1 is configured continue with the Debian installation.  &lt;/p&gt;
&lt;p&gt;After installing the core system, the installer will give you the choice of installing a desktop environment, a web server, database, file server etc. You can choose not to install anything further. The bootloader will then be installed and the machine restarted to complete installation.  &lt;/p&gt;</summary><category term="software"></category><category term="debian"></category></entry><entry><title>Madowatt Wireless E-Meter User Manual</title><link href="/madowatt-wireless-e-meter-user-manual.html" rel="alternate"></link><updated>2013-08-25T00:00:00+01:00</updated><author><name>Sridhar</name></author><id>tag:,2013-08-25:madowatt-wireless-e-meter-user-manual.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Madowatt Meter: a current transformer based internet connected meter.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Connecting meter to inverter 
1. Clip current transformer onto output of inverter.&lt;br /&gt;
2. Connect current transformer to meter via 2.3mm audio jack.&lt;br /&gt;
3. Connect 12V DC power supply adapter to meter and mains. Red LED should light up.   &lt;/p&gt;
&lt;p&gt;Connect XBee adapter to USB port of computer&lt;br /&gt;
1. If running Linux can use screen to check readings on serial port.  &lt;/p&gt;
&lt;p&gt;Download java and madowatt jar 
0. Download librxtxSerial.so and save in /usr/lib/jvm/java-7-openjdk-amd64/jre/lib/amd64 (Linux) or in C:\Program Files\Java\jre7\bin (Windoze) 
1. Download &lt;a href="Madowatt.jar"&gt;jar&lt;/a&gt; and &lt;a href="RXTXcomm.jar"&gt;rxtx&lt;/a&gt; and save in classpath.&lt;br /&gt;
2. Run jar from command prompt: java -jar Madowatt.jar &lt;client_id&gt;   &lt;br /&gt;
3. Application will connect to server and transmit data from serial port.  &lt;/p&gt;
&lt;p&gt;Monitor Production&lt;br /&gt;
1. Connect to &lt;a href="http://meter.madowatt.com"&gt;Portal&lt;/a&gt;&lt;br /&gt;
2. Register as new user and select password.&lt;br /&gt;
3. Enter meter number as part of registration process.&lt;br /&gt;
4. View Production.  &lt;/p&gt;</summary><category term="arduino"></category><category term="xbee"></category><category term="atmel"></category><category term="electronics"></category></entry><entry><title>Madowatt Wireless E-Meter Maker Manual</title><link href="/madowatt-wireless-e-meter-maker-manual.html" rel="alternate"></link><updated>2013-08-18T00:00:00+01:00</updated><author><name>Sridhar</name></author><id>tag:,2013-08-18:madowatt-wireless-e-meter-maker-manual.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Madowatt Meter: a current transformer based internet connected meter&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Bill Of Materials:&lt;br /&gt;
1. Atmel ATmega328PU with Arduino Optiboot&lt;br /&gt;
2. Crystal: 1 x 16MHz&lt;br /&gt;
3. Voltage regulators: 1 x LD7805, 1 x &lt;a href="https://www.sparkfun.com/products/526"&gt;LD33V&lt;/a&gt;&lt;br /&gt;
4. Stripboard  &lt;br /&gt;
5. XBee S2 
6. XBee USB Adapter 
7. &lt;a href="https://www.sparkfun.com/products/8276"&gt;XBee Module Breakout&lt;/a&gt;.&lt;br /&gt;
7. Capacitors: 3 x 10uF, 2 x 22pF&lt;br /&gt;
8. Resistors: 2 x 1.7k, 2 x 2.2k, 2 x 3.3k, 2 x 10k&lt;br /&gt;
9. 12VDC 500mA Power Adapter&lt;br /&gt;
10. LEDs: 2&lt;br /&gt;
11. SCT 030 current transformer&lt;br /&gt;
12. &lt;a href="https://www.sparkfun.com/products/11570"&gt;TRRS 3.5mm Jack Breakout&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Circuit Diagram&lt;/em&gt;&lt;br /&gt;
The circuit diagram is shown below. Solder all the components onto stripboard. Use a socket for the ATMEGA328-PU and a breadboard adapter for the XBee S2, i.e. don't solder these directly onto the stripboard as they're sensitive devices and may be destroyed while soldering. The rest of the devices can be soldered directly onto the board.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Circuit Diagram" src="mado_meter_circuit.png" /&gt;  &lt;/p&gt;
&lt;p&gt;Current transformer circuit: the current transformer circuit is the simplest part of the meter. Simply connect the +ive end of the SCT-030 to A1 on the Uno and the -ive to GND. Then connect a 10kohm resistor and a 10uF capacitor in series from 5V on the Uno to GND on the Uno. Then connect another 10kohm resistor in parallel with the capacitor and in series with the first resistor. See diagram above and prototype below:   &lt;/p&gt;
&lt;p&gt;Atmel / Arduino circuit: an Arduino Uno board can be replicated on stripboard as described &lt;a href="http://www.arduino.cc/en/Main/Standalone"&gt;here&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;XBee circuit: a 5V power supply is used with the Atmel ATMEGA328 while the XBee has a reference voltage of 3.3V. So the connections from the Atmel RX/TX to the XBee Dout/Din have to made using a voltage divider to correspond with the XBee's Vref=3.3V.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Atmel ATMEGA328PU&lt;/em&gt; &lt;br /&gt;
1. Burn bootloader: if the ATMEGA doesn't already have a Arduino bootloader on it it will have to be loaded.&lt;br /&gt;
2. Upload the following sketch (current only) onto the micro-controller using an Arduino Uno. Power is calculated assuming voltage of 230V and written to serial port.  &lt;/p&gt;
&lt;p&gt;#include "EmonLib.h"    // Include Emon Library&lt;br /&gt;
EnergyMonitor emon1;    // Create an instance&lt;br /&gt;
void setup(){&lt;br /&gt;
  Serial.begin(9600);&lt;br /&gt;
  emon1.current(1, 30); // Current: input pin, calibration.&lt;br /&gt;
}&lt;br /&gt;
void loop(){&lt;br /&gt;
  double Irms = emon1.calcIrms(1480);  // Calculate Irms only&lt;br /&gt;
  Serial.println(Irms*230.0);          // Apparent power&lt;br /&gt;
  delay(10000);&lt;br /&gt;
}  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;XBee RF wireless network&lt;/em&gt;   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare the radios for configuration: use X-CTU on Windows or Wine on Linux. See p33 in &lt;a href="http://www.amazon.com/Building-Wireless-Sensor-Networks-Processing/dp/0596807732/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1389273217&amp;amp;sr=1-1&amp;amp;keywords=wireless+sensor+networks"&gt;WirelessSensorNetworks&lt;/a&gt; for instructions on how to install Wine and run X-CTU in Wine on Linux:  &lt;/li&gt;
&lt;li&gt;If Linux, create a symbolic link in ~/.wine/dosdevices to /dev/ttyUSB0 and call it something like com10: ln -s /dev/ttyUSB0 ~/.wine/dosdevices/com10  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then create a 'User COM Port' in X-CTU by choosing the appropriate com port number (10 in this case). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use an XBee USB adapter to connect a radio to the USB port selected as com10. Test/Query the radio to ensure it's working. A dialog box with the type and firmware version should appear.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pressing 'Read' will give current parameter values. For a Digi International XBee S2 choose XB24-ZB as 'Modem'. Configure one co-ordinator radio by choosing the 'Modem Configuration' tab and choosing 'ZIGBEE COORDINATOR AT' function set. Values can be changed by either entering values into the box next to the parameter name and pressing 'Write' OR by clicking on the 'Terminal' tab and manually setting the parameter values using AT commands as follows: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;+++ (3 pluses without pressing enter) will result in OK from the radio and set it in AT mode. eg. +++OK  &lt;/li&gt;
&lt;li&gt;ATID will read and output the PAN ID of the network. This can be left 0 if there are no other co-ordinator radios around. The co-ordinator will randomly choose a PAN ID which can be read using ATOI.  &lt;/li&gt;
&lt;li&gt;ATMY will read and output the 16-bit network address of the module. A value of 0xFFFE means the module hasn't joined a ZigBee network. The co-ordinator will have an ATMY of 0. &lt;/li&gt;
&lt;li&gt;ATBD will read and output the baud rate. Set it to 9600 using ATBD3. &lt;/li&gt;
&lt;li&gt;ATOI reads and outputs the 16-bit PAN ID. The OI value reflects the actial 16-bit PAN ID the module is running on.  &lt;/li&gt;
&lt;li&gt;ATCN exits command mode. &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure one or more router radios by inserting another XBee S2 into the USB adapater and choose XB24-ZB as 'Modem'. Configure a router radio by choosing 'Zigbee Router AT' under 'Modem Configuration':  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If ATID is not set (left at 0), a router/end device will join any extended PAN ID. &lt;/li&gt;
&lt;li&gt;If ATID has been set on the co-ordinator radio then the same value should be set as ATID on the router radio so the router can join the network created by the co-ordinator.  &lt;/li&gt;
&lt;li&gt;Changes to ID, eg. ATID2612 should be written to non-volatile memory using ATWR command to preserve the ID setting if a power cycle occurs.  &lt;/li&gt;
&lt;li&gt;More details can be found in the &lt;a href="http://www.digi.com/products/wireless-wired-embedded-solutions/zigbee-rf-modules/zigbee-mesh-module/xbee-zb-module#docs"&gt;product manual&lt;/a&gt; on Digi's website.  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In case X-CTU is not at hand the radios can also be configured using an Arduino Uno and an XBee wireless shield.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Upload a 'blank' sketch onto the ATMega328. A black sketch (bare minimum) is one with nothing in the loop() function.  &lt;/li&gt;
&lt;li&gt;Connect the XBee radio to the XBee shield and connect the shield to the Arduino Uno (Uno). &lt;/li&gt;
&lt;li&gt;To configure the radio, the XBee shield should be in USB mode. In this mode, commands from your serial port on the computer are sent to the XBee radio.  &lt;/li&gt;
&lt;li&gt;The XBee radio can be configured using either the Arduino XBee shield or a XBee adapter. &lt;/li&gt;
&lt;li&gt;Connect the XBee adapter to the USB port of a computer using a USB to USB mini B cable.  &lt;/li&gt;
&lt;li&gt;Use a serial emulator like screen. After finding the port that the XBee adapter has been connected, type screen /dev/ttyUSB0 9600  &lt;/li&gt;
&lt;li&gt;The XBee radio can be put into configuration mode by typing +++ and waiting for a second. The expected response from the XBee radio is OK.  &lt;/li&gt;
&lt;li&gt;Use the commands described in the previous section to change parameters of the radios. Note the radios must already be configured using X-CTU at some point in the past.  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notes &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;If the XBee shield is being used in a production meter then it should be in MICRO mode.  &lt;/li&gt;
&lt;li&gt;Uploading the current sketch: if you want to upload the current sketch without removing the XBee shield, disconnect the Uno+XBee shield from the power supply and switch the XBee shield to MICRO mode. In this mode, you can upload sketches to the ATMega328. Note that in this mode whatever is sent to the ATMega328 is also transmitted by the XBee radio if it's already configured. So you're likely to see a stream of rubbish if there's another XBee radio with the same (or no) PAN ID.   &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Prototype" src="mado_meter_proto.png" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Madowatt Portal&lt;/strong&gt;&lt;br /&gt;
1. Client: the MadowattClient connects to the MadowattServer, reads the serial port of the computer and transmits the readings to the MadowattServer. The MadowattClient is run by downloading the jar and running: java -jar Madowatt.jar &lt;meter_id&gt;&lt;br /&gt;
2. Server:  The MadowattServer is a multi-threaded Java application which listens for connections from clients on a single port and stores the data the clients send in a postgresql database. Complile and run the server using: &lt;br /&gt;
javac -d . -cp .:postgresql-9.3-1100.jdbc41.jar:c3p0-0.9.1.jar MadowattServer.java MadowattServerThread.java MadowattProtocol.java MadowattData.java&lt;br /&gt;
java -cp .:postgresql-9.3-1100.jdbc41.jar:c3p0-0.9.1.jar madowatt.MadowattServer &lt;br /&gt;
3. Servlet: the ChartServlet is a Java HttpServlet which displays the data sent by the Client to the Server. See &lt;a href="http://meter.madowatt.in"&gt;this&lt;/a&gt; for instance.  &lt;/p&gt;</summary><category term="arduino"></category><category term="xbee"></category><category term="atmel"></category><category term="electronics"></category></entry></feed>